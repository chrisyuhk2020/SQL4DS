Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would.
For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer.
You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer.
You will be required to prepare the dataset for the analysis you choose to do.
As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked,
and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work.
You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers.
If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000



2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 7162
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No


	SQL code used to arrive at answer:

	SELECT *
FROM user
WHERE id IS NULL or
    name IS NULL or
    review_count IS NULL or
    yelping_since IS NULL or
    useful IS NULL or
    funny IS NULL or
    cool IS NULL or
    fans IS NULL or
    average_stars IS NULL or
    compliment_hot IS NULL or
    compliment_more IS NULL or
    compliment_profile IS NULL or
    compliment_list IS NULL or
    compliment_plain IS NULL or
    compliment_cool IS NULL or
    compliment_funny IS NULL or
    compliment_writer IS NULL or
    compliment_photos IS NULL
    ;




4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars

		min:1		max:5		avg:3.7082


	ii. Table: Business, Column: Stars

		min:1		max:5		avg:3.6549


	iii. Table: Tip, Column: Likes

		min:0		max:2		avg:0.0144


	iv. Table: Checkin, Column: Count

		min:1		max:53		avg:1.9414


	v. Table: User, Column: Review_count

		min:0		max:2000		avg:24.2995



5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	select max(review_count), city from (
	select sum(review_count) as review_count,city from business
	group by city
	)


	Copy and Paste the Result Below:
	+-------------------+-----------+
	| max(review_count) | city      |
	+-------------------+-----------+
	|             82854 | Las Vegas |
	+-------------------+-----------+


6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT city,stars,sum(review_count)
from business
where city='Avon'
group by stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+-------------------+
| stars | sum(review_count) |
+-------+-------------------+
|   1.5 |                10 |
|   2.5 |                 6 |
|   3.5 |                88 |
|   4.0 |                21 |
|   4.5 |                31 |
|   5.0 |                 3 |
+-------+-------------------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars,sum(review_count)
from business
where city='Beachwood'
group by stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+-------------------+
| stars | sum(review_count) |
+-------+-------------------+
|   2.0 |                 8 |
|   2.5 |                 3 |
|   3.0 |                11 |
|   3.5 |                 6 |
|   4.0 |                69 |
|   4.5 |                17 |
|   5.0 |                23 |
+-------+-------------------+

7. Find the top 3 users based on their total number of reviews:

	SQL code used to arrive at answer:

	select id, name, review_count from user order by review_count desc limit 3

	Copy and Paste the Result Below:

	+------------------------+--------+--------------+
	| id                     | name   | review_count |
	+------------------------+--------+--------------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
	+------------------------+--------+--------------+


8. Does posing more reviews correlate with more fans?
select * from (
	select  "1900" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 2000 and review_count >= 1900
    union
	select  "1800" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 1900 and review_count >= 1800
    union
	select  "1700" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 1800 and review_count >= 1700
    union
	select  "1600" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 1700 and review_count >= 1600
    union
	select  "1500" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 1600 and review_count >= 1500
    union
	select  "1400" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 1500 and review_count >= 1400
    union
	select  "1300" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 1400 and review_count >= 1300
    union
	select  "1200" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 1300 and review_count >= 1200
    union
	select  "1100" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 1200 and review_count >= 1100
    union
	select  "1000" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 1100 and review_count >= 1000
    union
	select  "900" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 1000 and review_count >= 900
    union
	select  "800" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 900 and review_count >= 800
    union
	select  "700" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 800 and review_count >= 700
    union
	select  "600" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 700 and review_count >= 600
    union
	select  "500" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 600 and review_count >= 500
    union
	select  "400" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 500 and review_count >= 400
    union
	select  "300" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 400 and review_count >= 300
    union
	select  "200" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 300 and review_count >= 400
    union
	select  "100" as review_range, avg(fans), avg(CAST(review_count AS float) / CAST(fans AS float)) as review_per_fan from user where review_count < 200 and review_count >= 100
) order by ABS(review_range)

	+--------------+---------------+----------------+
	| review_range |     avg(fans) | review_per_fan |
	+--------------+---------------+----------------+
	| 100          | 8.91335740072 |  33.7971845431 |
	| 200          | 18.6037735849 |  31.0300769554 |
	| 300          | 24.8035714286 |  21.9384881697 |
	| 400          | 31.5714285714 |   21.823132851 |
	| 500          | 32.8461538462 |  24.4499825652 |
	| 600          |          76.0 |  19.4604615251 |
	| 700          |          58.0 |  14.1429091855 |
	| 800          | 97.5714285714 |  11.2993253108 |
	| 900          |         236.0 |  10.3709607814 |
	| 1000         |         104.0 |  9.99038461538 |
	| 1100         |         163.5 |  36.7286977492 |
	| 1200         |         113.5 |  10.9897454031 |
	| 1300         |          76.0 |  17.6184210526 |
	| 1400         |          None |           None |
	| 1500         |          None |           None |
	| 1600         |          50.0 |          32.58 |
	| 1700         |          None |           None |
	| 1800         |          None |           None |
	| 1900         |          None |           None |
	+--------------+---------------+----------------+

	Please explain your findings and interpretation of the results:
	In a general sense, for users who posted more review, they usually have more fans. However, this can't be taken for granted. There are many exceptional cases found.
	Like users who posted more than 700 reviews could have less fans than users with 600 review. These cases could be found in 1600, 1300, 1200, 1000...and etc.
	In short, there is a general trend for positive relationship between review and fans, also with significant fluctuation / noises and diminished return found.


9. Are there more reviews with the word "love" or with the word "hate" in them?
	Answer:
	+--------+----------+
	| "love" | count(*) |
	+--------+----------+
	| hate   |      232 |
	| love   |     1780 |
	+--------+----------+

	SQL code used to arrive at answer:
	select "love", count(*) from review where LOWER(text) LIKE "%love%"
	union
	select "hate", count(*) from review where LOWER(text) LIKE "%hate%"

10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	select name from user order by fans desc limit 10

	Copy and Paste the Result Below:
	+-----------+
	| name      |
	+-----------+
	| Amy       |
	| Mimi      |
	| Harald    |
	| Gerald    |
	| Christine |
	| Lisa      |
	| Cat       |
	| William   |
	| Fran      |
	| Lissa     |
	+-----------+



Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating.
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

select count(*), category, city from business b
LEFT JOIN category c
on   c.business_id = b.id
where category is not null
group by category, city
order by count(*) desc

select count(*), category, city from review r
LEFT JOIN category c
on   c.business_id = r.business_id
LEFT JOIN business b
on   b.id = r.business_id
where category is not null and city is not null
group by category, city
order by count(*) desc

We could see that Phoenix's Restaurants has a fairly good amount of sample size and with notable review numbers.
Therefore, we pick this for further investigation.

city - Phoenix
category - Restaurants

i. Do the two groups you chose to analyze have a different distribution of hours?

Regarding the starting hours, they are similarly starting to operate since 11am, few of them operate since 9am for those who have lesser stars.

For restaurants in Phoenix with 4-5 stars, they usually close earlier around on 6pm or 10pm.
For 2-3 stars restaurants, most of them cease operation after 11pm.

Starting Hours for Phoenix(Restaurants) businesses with 4-5 stars                       Starting Hours for Phoenix(Restaurants) businesses with 2-3 stars
+----------+----------+                                                                +----------+----------+
| starting | count(*) |                                                                | starting | count(*) |
+----------+----------+                                                                +----------+----------+
| 8:00 ~   |        0 |                                                                | 8:00 ~   |        0 |
| 9:00 ~   |        0 |                                                                | 9:00 ~   |        2 |
| 10:00 ~  |        0 |                                                                | 10:00 ~  |        0 |
| 11:00 ~  |       13 |                                                                | 11:00 ~  |        5 |
| 12:00 ~  |        0 |                                                                | 12:00 ~  |        0 |
+----------+----------+                                                                +----------+----------+

Ending Hours for Phoenix(Restaurants) businesses with 4-5 stars												Ending Hours for Phoenix(Restaurants) businesses with 2-3 stars
+---------+----------+                                                                +---------+----------+
| ending  | count(*) |                                                                | ending  | count(*) |
+---------+----------+                                                                +---------+----------+
| ~ 14:00 |        0 |                                                                | ~ 14:00 |        0 |
| ~ 15:00 |        0 |                                                                | ~ 15:00 |        0 |
| ~ 16:00 |        1 |				   																											| ~ 16:00 |        0 |
| ~ 17:00 |        0 |                                                                | ~ 17:00 |        0 |
| ~ 18:00 |        6 |                                                                | ~ 18:00 |        0 |
| ~ 19:00 |        0 |                                                                | ~ 19:00 |        0 |
| ~ 20:00 |        0 |                                                                | ~ 20:00 |        0 |
| ~ 21:00 |        0 |                                                                | ~ 21:00 |        0 |
| ~ 22:00 |        7 |                                                                | ~ 22:00 |        0 |
| ~ 23:00 |        0 |																																| ~ 23:00 |        5 |
| ~ 24:00 |        0 |																					 											| ~ 24:00 |        6 |
| ~ 25:00 |        0 |																																| ~ 25:00 |        0 |
| ~ 26:00 |        0 |																																| ~ 26:00 |        3 |
+---------+----------+                                                                +---------+----------+

SQL for Starting hours :

select * from (
select "8:00 ~" as starting, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%|8%"

union

select "9:00 ~" as starting, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%|9%"

union

select "10:00 ~" as starting, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%|10%"

union

select "11:00 ~" as starting, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%|11%"

union

select "12:00 ~" as starting, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%|12%"

) order by ABS(starting)

SQL for Ending hours :

select "~ 14:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-14%"

union

select "~ 15:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-15%"

union

select "~ 16:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-16%"

union

select "~ 17:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-17%"

union

select "~ 18:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-18%"

union

select "~ 19:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-19%"

union

select "~ 20:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-20%"

union

select "~ 21:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-21%"

union

select "~ 22:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-22%"

union

select "~ 23:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-23%"

union

select "~ 24:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-0:%"

union

select "~ 25:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-1:%"

union

select "~ 26:00" as ending, count(*) from business b Left Join category c on c.business_id = b.id Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 4 and stars <= 5
and hours LIKE "%-2:%"

ii. Do the two groups you chose to analyze have a different number of reviews?
+------+----------+----------+-------------+
| city | category | count(*) | Stars       |
+------+----------+----------+-------------+
| None |     None |        0 | 2 - 3 Stars |
+------+----------+----------+-------------+
+---------+-------------+----------+-------------+
| city    | category    | count(*) | Stars       |
+---------+-------------+----------+-------------+
| Phoenix | Restaurants |        5 | 4 - 5 Stars |
+---------+-------------+----------+-------------+

SQL used :
select city, category, count(*) , "4 - 5 Stars" as Stars from review r
Left Join category c on c.business_id = r.business_id
Left Join business b on r.business_id = b.id
where  b.city = 'Phoenix'
and c.category = 'Restaurants'
and (b.stars >= 4 and b.stars <= 5)

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Most of the restaurants were located in city center with higher stars. In contrast, half of the lower stars restaurants (one of them) were located in city suburbs.

SQL used :
select * from business b
Left Join category c on c.business_id = b.id
Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
and stars >= 2 and stars <= 3
group by business_id



2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed?
List at least two differences and the SQL code you used to arrive at your answer.

+---------+-------+--------------+----------------------------------------+
| is_open | stars | review_count | name                                   |
+---------+-------+--------------+----------------------------------------+
|       1 |   3.5 |           63 | Five Guys                              |
|       1 |   2.0 |            8 | McDonald's                             |
|       0 |   4.5 |            7 | Charlie D's Catfish & Chicken          |
|       1 |   4.0 |          188 | Matt's Big Breakfast                   |
|       1 |   3.0 |           60 | Gallagher's                            |
|       1 |   4.0 |          431 | Bootleggers Modern American Smokehouse |
+---------+-------+--------------+----------------------------------------+

i. Difference 1: Those restaurants is still in operation usually has more reviews.


ii. Difference 2: Those restaurants is still in operation usually has less stars - rating.

SQL used :

select is_open, stars, review_count  name from business b
Left Join category c on c.business_id = b.id
Left Join hours h on h.business_id = b.id
where c.category = 'Restaurants'
and city = 'Phoenix'
group by b.id


3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them,
predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started,
so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:

i. Indicate the type of analysis you chose to do:
Which restaurants (or any dining place) has the highest score with highly authenticated reviews with from the data set?

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
Usually there are a lot of fake reviews created by restaurant owners, in order to save time, we should find out which restaurant having the highest score with
the largest numbers of authenticated reviews that could ensure we enjoy the best service.

iii. Output of your finished dataset:
+-----+----------------------------------------+------------+-------+-------+--------------+--------------------+
| cnt | name                                   | city       | state | stars | review_count | category           |
+-----+----------------------------------------+------------+-------+-------+--------------+--------------------+
|   6 | Big Wong Restaurant                    | Las Vegas  | NV    |   4.0 |          768 | Noodles            |
|   2 | Vanilla Pastry Studio                  | Pittsburgh | PA    |   4.5 |           72 | Desserts           |
|   1 | West Side Market                       | Cleveland  | OH    |   4.5 |          723 | Food               |
|   1 | Matt's Big Breakfast                   | Phoenix    | AZ    |   4.0 |          188 | Breakfast & Brunch |
|   1 | Bootleggers Modern American Smokehouse | Phoenix    | AZ    |   4.0 |          431 | Food               |
|   0 | Cafe Tandoor                           | Aurora     | OH    |   3.5 |           32 | Restaurants        |
|   0 | Slyman's Restaurant                    | Cleveland  | OH    |   4.5 |          361 | Sandwiches         |
+-----+----------------------------------------+------------+-------+-------+--------------+--------------------+


iv. Provide the SQL code you used to create your final dataset:
select max(useful) as cnt , b.name, b.city, b.state, b.stars, b.review_count, c.Category from review r
left join business b on b.id = r.business_id
left join Category c on b.id = c.business_id
where b.id is not null and Category is not null
 and( Category = 'Noodles'
 or Category = 'Desserts'
 or Category = 'Breakfast & Brunch'
 or Category = 'Sandwiches'
 or Category = 'Restaurants'
 or Category = 'Chinese'
 or Category = 'Food')
group by r.business_id
order by cnt desc
